@@ -0,0 +1,309 @@
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d7d90ad9",
   "metadata": {},
   "source": [
    "## 1.\tWrite a Python program to find words which are greater than given length k?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bf25a824",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Words greater than length 5 :\n",
      "sample\n",
      "string\n",
      "demonstrate\n",
      "program.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "my_string = \"This is a sample string to demonstrate the program.\"\n",
    "\n",
    "\n",
    "k = 5\n",
    "\n",
    "\n",
    "words = my_string.split()\n",
    "\n",
    "\n",
    "print(\"Words greater than length\", k, \":\")\n",
    "for word in words:\n",
    "    if len(word) > k:\n",
    "        print(word)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "366e87ae",
   "metadata": {},
   "source": [
    "## 2.\tWrite a Python program for removing i-th character from a string?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8fcb0874",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, orld!\n"
     ]
    }
   ],
   "source": [
    "def remove_char(string, i):\n",
    "    \n",
    "    return string[:i] + string[i+1:]\n",
    "\n",
    "\n",
    "string = \"Hello, World!\"\n",
    "i = 7\n",
    "new_string = remove_char(string, i)\n",
    "print(new_string)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fda17a7e",
   "metadata": {},
   "source": [
    "## 3.\tWrite a Python program to split and join a string?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0f87fc98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello-world,-how-are-you?\n"
     ]
    }
   ],
   "source": [
    "def split_and_join(string):\n",
    "    \n",
    "    words = string.split()\n",
    "\n",
    "    \n",
    "    new_string = '-'.join(words)\n",
    "\n",
    "    return new_string\n",
    "\n",
    "\n",
    "string = \"Hello world, how are you?\"\n",
    "new_string = split_and_join(string)\n",
    "print(new_string)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cdb06d4",
   "metadata": {},
   "source": [
    "## 4.\tWrite a Python to check if a given string is binary string or not?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "81dbd4a7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "def is_binary_string(s):\n",
    "    for char in s:\n",
    "        if char not in ['0', '1']:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "\n",
    "s1 = '10101010'\n",
    "s2 = '10101102'\n",
    "\n",
    "print(is_binary_string(s1)) # Output: True\n",
    "print(is_binary_string(s2)) # Output: False\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b2333c3",
   "metadata": {},
   "source": [
    "## 5.\tWrite a Python program to find uncommon words from two Strings?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fcd0da1e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter first string: hemant chaudhary\n",
      "Enter second string: chirag sharma\n",
      "Uncommon words:  {'hemant', 'chirag', 'sharma', 'chaudhary'}\n"
     ]
    }
   ],
   "source": [
    "string1 = input(\"Enter first string: \")\n",
    "string2 = input(\"Enter second string: \")\n",
    "\n",
    "\n",
    "words1 = string1.split()\n",
    "words2 = string2.split()\n",
    "\n",
    "\n",
    "set1 = set(words1)\n",
    "set2 = set(words2)\n",
    "\n",
    "\n",
    "uncommon_words = set1.symmetric_difference(set2)\n",
    "\n",
    "print(\"Uncommon words: \", uncommon_words)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7da67b0b",
   "metadata": {},
   "source": [
    "## 6.\tWrite a Python to find all duplicate characters in string?\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "d2cc05d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a string: hemant chaudhary\n",
      "Duplicate characters found: h, a\n"
     ]
    }
   ],
   "source": [
    "string = input(\"Enter a string: \")\n",
    "duplicates = []\n",
    "for char in string:\n",
    "    if string.count(char) > 1 and char not in duplicates:\n",
    "        duplicates.append(char)\n",
    "        \n",
    "if len(duplicates) == 0:\n",
    "    print(\"No duplicate characters found.\")\n",
    "else:\n",
    "    print(\"Duplicate characters found:\", \", \".join(duplicates))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2a1f307",
   "metadata": {},
   "source": [
    "## 7.\tWrite a Python Program to check if a string contains any special character?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dec6d627",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "enter the string: hemant chaudhary.\n",
      "The string contains a special character.\n"
     ]
    }
   ],
   "source": [
    "import string\n",
    "\n",
    "def has_special_char(input_string):\n",
    "    \n",
    "    special_chars = string.punctuation\n",
    "\n",
    "    \n",
    "    for char in input_string:\n",
    "        if char in special_chars:\n",
    "            return True\n",
    "\n",
    "    return False\n",
    "\n",
    "\n",
    "input_str = input(\"enter the string: \")\n",
    "if has_special_char(input_str):\n",
    "    print(\"The string contains a special character.\")\n",
    "else:\n",
    "    print(\"The string does not contain any special character.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8ca7ed3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
