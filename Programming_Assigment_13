@@ -0,0 +1,353 @@
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a8197395",
   "metadata": {},
   "source": [
    "## Question 1:Write a program that calculates and prints the value according to the given formula:\n",
    "## Q = Square root of [(2 * C * D)/H]\n",
    "## Following are the fixed values of C and H:\n",
    "## C is 50. H is 30.\n",
    "## D is the variable whose values should be input to your program in a comma-separated sequence.\n",
    "## Example\n",
    "## Let us assume the following comma separated input sequence is given to the program:\n",
    "## 100,150,180\n",
    "## The output of the program should be:\n",
    "## 18,22,24\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71fa6377",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the values of D separated by commas: 100,150,180\n",
      "18,22,24\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "\n",
    "C = 50\n",
    "H = 30\n",
    "\n",
    "\n",
    "d_values_str = input(\"Enter the values of D separated by commas: \")\n",
    "\n",
    "\n",
    "d_values = d_values_str.split(\",\")\n",
    "\n",
    "\n",
    "results = []\n",
    "\n",
    "\n",
    "for d in d_values:\n",
    "    \n",
    "    d = float(d)\n",
    "    \n",
    "    \n",
    "    q = math.sqrt((2 * C * d) / H)\n",
    "    \n",
    "    \n",
    "    results.append(str(round(q)))\n",
    "    \n",
    "\n",
    "print(\",\".join(results))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "526a633f",
   "metadata": {},
   "source": [
    "## Question 2:Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.\n",
    "## Note: i=0,1.., X-1; j=0,1,¡¬Y-1.\n",
    "## Example\n",
    "## Suppose the following inputs are given to the program:\n",
    "## 3,5\n",
    "## Then, the output of the program should be:\n",
    "## [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]] \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e49a8cd3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the values of X and Y separated by a comma: 3,5\n",
      "[[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]]\n"
     ]
    }
   ],
   "source": [
    "X, Y = map(int, input(\"Enter the values of X and Y separated by a comma: \").split(\",\"))\n",
    "\n",
    "\n",
    "arr = []\n",
    "\n",
    "\n",
    "for i in range(X):\n",
    "    \n",
    "    row = []\n",
    "    \n",
    "    for j in range(Y):\n",
    "        \n",
    "        row.append(i * j)\n",
    "    \n",
    "    arr.append(row)\n",
    "\n",
    "\n",
    "print(arr)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cb8434e",
   "metadata": {},
   "source": [
    "## Question 3:Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.\n",
    "## Suppose the following input is supplied to the program:\n",
    "## without,hello,bag,world\n",
    "## Then, the output should be:\n",
    "## bag,hello,without,world\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7d3b122b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a comma-separated sequence of words: without,hello,bag,world\n",
      "bag,hello,without,world\n"
     ]
    }
   ],
   "source": [
    "words = input(\"Enter a comma-separated sequence of words: \")\n",
    "\n",
    "\n",
    "word_list = words.split(\",\")\n",
    "\n",
    "\n",
    "word_list.sort()\n",
    "\n",
    "\n",
    "sorted_words = \",\".join(word_list)\n",
    "\n",
    "\n",
    "print(sorted_words)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb14723b",
   "metadata": {},
   "source": [
    "## Question 4:Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.\n",
    "## Suppose the following input is supplied to the program:\n",
    "## hello world and practice makes perfect and hello world again\n",
    "## Then, the output should be:\n",
    "## again and hello makes perfect practice world\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "69d2f244",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a sequence of whitespace-separated words: hello world and practice makes perfect and hello world again\n",
      "again and hello makes perfect practice world\n"
     ]
    }
   ],
   "source": [
    "words = input(\"Enter a sequence of whitespace-separated words: \")\n",
    "\n",
    "\n",
    "word_list = words.split()\n",
    "\n",
    "unique_words = list(set(word_list))\n",
    "\n",
    "\n",
    "unique_words.sort()\n",
    "\n",
    "\n",
    "sorted_words = \" \".join(unique_words)\n",
    "\n",
    "\n",
    "print(sorted_words)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b347536c",
   "metadata": {},
   "source": [
    "## Question 5:Write a program that accepts a sentence and calculate the number of letters and digits.\n",
    "## Suppose the following input is supplied to the program:\n",
    "## hello world! 123\n",
    "## Then, the output should be:\n",
    "## LETTERS 10\n",
    "## DIGITS 3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e0705fe3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter a sentence: hello world! 123\n",
      "LETTERS 10\n",
      "DIGITS 3\n"
     ]
    }
   ],
   "source": [
    "sentence = input(\"Enter a sentence: \")\n",
    "\n",
    "\n",
    "num_letters = 0\n",
    "num_digits = 0\n",
    "\n",
    "\n",
    "for char in sentence:\n",
    "    \n",
    "    if char.isalpha():\n",
    "        num_letters += 1\n",
    "    \n",
    "    elif char.isdigit():\n",
    "        num_digits += 1\n",
    "\n",
    "\n",
    "print(\"LETTERS\", num_letters)\n",
    "print(\"DIGITS\", num_digits)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f1805c1a",
   "metadata": {},
   "source": [
    "## Question 6:A website requires the users to input username and password to register. Write a program to check the validity of password input by users.\n",
    "## Following are the criteria for checking the password:\n",
    "## 1. At least 1 letter between [a-z]\n",
    "## 2. At least 1 number between [0-9]\n",
    "## 1. At least 1 letter between [A-Z]\n",
    "## 3. At least 1 character from [$#@]\n",
    "4. Minimum length of transaction password: 6\n",
    "\n",
    "5. Maximum length of transaction password: 12\n",
    "\n",
    "Your program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.\n",
    "\n",
    "Example\n",
    "\n",
    "If the following passwords are given as input to the program:\n",
    "\n",
    "ABd1234@1,a F1#,2w3E*,2We3345\n",
    "\n",
    "Then, the output of the program should be:\n",
    "\n",
    "ABd1234@1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "40669b41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter passwords separated by commas: Hemant@123\n",
      "Hemant@123\n"
     ]
    }
   ],
   "source": [
    "import re\n",
    "\n",
    "def is_valid_password(password):\n",
    "    if len(password) < 6 or len(password) > 12:\n",
    "        return False\n",
    "    if not re.search(\"[a-z]\", password):\n",
    "        return False\n",
    "    if not re.search(\"[A-Z]\", password):\n",
    "        return False\n",
    "    if not re.search(\"[0-9]\", password):\n",
    "        return False\n",
    "    if not re.search(\"[$#@]\", password):\n",
    "        return False\n",
    "    return True\n",
    "\n",
    "passwords = input(\"Enter passwords separated by commas: \").split(\",\")\n",
    "valid_passwords = []\n",
    "for password in passwords:\n",
    "    if is_valid_password(password):\n",
    "        valid_passwords.append(password)\n",
    "\n",
    "print(\",\".join(valid_passwords))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1c5b392",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
