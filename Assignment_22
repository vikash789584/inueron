{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "05845110",
   "metadata": {},
   "source": [
    "## 1. Add the current date to the text file today.txt as a string.\n",
    "\n",
    "Ans:-Here's how you can add the current date to the text file today.txt as a string:\n",
    "\n",
    "from datetime import datetime\n",
    "\n",
    "today = datetime.today().strftime('%Y-%m-%d')\n",
    "\n",
    "with open('today.txt', 'a') as file:\n",
    "\n",
    "    # Write the current date to the file\n",
    "    \n",
    "    file.write(today)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23c93cd4",
   "metadata": {},
   "source": [
    "## 2. Read the text file today.txt into the string today_string.\n",
    "\n",
    "Ans:-To read the text file today.txt into the string today_string, you can use the open() function to open the file in read mode, read the contents of the file using the .read() method, and then close the file using the .close() method. Here's an example:\n",
    "\n",
    "with open('today.txt', 'r') as f:\n",
    "\n",
    "    today_string = f.read()\n",
    "\n",
    "The with statement is used to automatically close the file when the block of code inside it is exited. The 'r' argument to open() specifies that the file should be opened in read mode. The contents of the file are read using the .read() method and stored in the today_string variable."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6c375e14",
   "metadata": {},
   "source": [
    "## 3. Parse the date from today_string.\n",
    "\n",
    "Ans:-To parse the date from the today_string variable, we can use the datetime module. Here's an example code that demonstrates how to do this:\n",
    "\n",
    "from datetime import datetime\n",
    "\n",
    "parsed_date = datetime.strptime(today_string.strip(), '%Y-%m-%d').date()\n",
    "\n",
    "print(parsed_date)\n",
    "\n",
    "\n",
    "The strptime function of the datetime module is used to parse a string representation of a date and time into a datetime object. In this case, we specify the format of the string using the %Y-%m-%d format code, which corresponds to the year, month, and day fields in a date string in the ISO format. The strip method is used to remove any leading or trailing whitespace from the string before parsing. Finally, we use the date() method to extract the date component of the datetime object."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7696b62f",
   "metadata": {},
   "source": [
    "## 4. List the files in your current directory.\n",
    "\n",
    "Ans:-You can list the files in the current directory using the os module in Python:\n",
    "\n",
    "import os\n",
    "\n",
    "files = os.listdir('.')\n",
    "\n",
    "print(files)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffcfdeed",
   "metadata": {},
   "source": [
    "## 5. Create a list of all of the files in your parent directory (minimum five files should be available).\n",
    "\n",
    "Ans:-Here's an example of how to create a list of all the files in the parent directory using the os module:\n",
    "\n",
    "import os\n",
    "\n",
    "parent_dir = os.path.dirname(os.getcwd())  # get the parent directory\n",
    "\n",
    "files = os.listdir(parent_dir)  # get a list of all files in the parent directory\n",
    "\n",
    "print(files)\n",
    "\n",
    "\n",
    "This code will print a list of all the files in the parent directory."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e107933b",
   "metadata": {},
   "source": [
    "## 6. Use multiprocessing to create three separate processes. Make each one wait a random number of seconds between one and five, print the current time, and then exit.\n",
    "\n",
    "Ans:-Here is an example code snippet that creates three separate processes using the multiprocessing module in Python:\n",
    "\n",
    "import multiprocessing\n",
    "\n",
    "import time\n",
    "\n",
    "import random\n",
    "\n",
    "import datetime\n",
    "\n",
    "def worker():\n",
    "\n",
    "    sleep_time = random.randint(1, 5)\n",
    "    \n",
    "    time.sleep(sleep_time)\n",
    "    \n",
    "    print(f\"Process {multiprocessing.current_process().name} waited for {sleep_time} seconds and finished at {datetime.datetime.now()}\")\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    for i in range(3):\n",
    "    \n",
    "        p = multiprocessing.Process(target=worker, name=f\"Process-{i}\")\n",
    "        \n",
    "        p.start()\n",
    "\n",
    "\n",
    "When you run this code, you should see output similar to the following:\n",
    "\n",
    "Process Process-1 waited for 1 seconds and finished at 2023-04-18 21:33:58.017216\n",
    "\n",
    "Process Process-0 waited for 3 seconds and finished at 2023-04-18 21:33:59.017284\n",
    "\n",
    "Process Process-2 waited for 5 seconds and finished at 2023-04-18 21:34:01.017296\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8829ae9e",
   "metadata": {},
   "source": [
    "## 7. Create a date object of your day of birth.\n",
    "\n",
    "Ans:-Sure! To create a date object of your day of birth, you can use the date class from the datetime module in Python. Here's an example:\n",
    "\n",
    "from datetime import date\n",
    "\n",
    "my_birthday = date(1990, 5, 15)\n",
    "\n",
    "print(my_birthday)\n",
    "\n",
    "\n",
    "This will output:\n",
    "\n",
    "\n",
    "1990-05-15\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55d4d60f",
   "metadata": {},
   "source": [
    "## 8. What day of the week was your day of birth?\n",
    "\n",
    "Ans:-To determine the day of the week of a given date, we can use the weekday() method of the datetime.date object. The method returns an integer representing the day of the week, where Monday is 0 and Sunday is 6. We can then use the calendar module to map this integer to a string representation of the day of the week. Here's an example code snippet:\n",
    "\n",
    "import datetime\n",
    "\n",
    "import calendar\n",
    "\n",
    "birthday = datetime.date(year=1990, month=7, day=15)\n",
    "\n",
    "day_of_week = birthday.weekday()\n",
    "\n",
    "day_name = calendar.day_name[day_of_week]\n",
    "\n",
    "print(day_name)\n",
    "\n",
    "\n",
    "Assuming your birthday is July 15, 1990, the output should be:\n",
    "\n",
    "\n",
    "Sunday\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6645a440",
   "metadata": {},
   "source": [
    "## 9. When will you be (or when were you) 10,000 days old?\n",
    "\n",
    "Ans:-To calculate when you will be (or when were you) 10,000 days old, you can use the timedelta function from the datetime module. Here's an example of how to do this:\n",
    "\n",
    "import datetime\n",
    "\n",
    "birthdate = datetime.date(2000, 1, 1)\n",
    "\n",
    "days_until_10000 = datetime.timedelta(days=10000) - (datetime.date.today() - birthdate)\n",
    "\n",
    "date_10000_days_old = datetime.date.today() + days_until_10000\n",
    "\n",
    "print(\"You will be 10,000 days old on:\", date_10000_days_old)\n",
    "\n",
    "\n",
    "Replace the birthdate with your own birthdate and run the code to get the date when you will be 10,000 days old.\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3649269e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
