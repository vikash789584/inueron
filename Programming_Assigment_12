@@ -0,0 +1,305 @@
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f3a89760",
   "metadata": {},
   "source": [
    "## 1.\tWrite a Python program to Extract Unique values dictionary values?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "419e977c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{1, 2, 3}\n"
     ]
    }
   ],
   "source": [
    "sample_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 2}\n",
    "\n",
    "\n",
    "values = list(sample_dict.values())\n",
    "\n",
    "\n",
    "unique_values = set(values)\n",
    "\n",
    "\n",
    "print(unique_values)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5454550",
   "metadata": {},
   "source": [
    "## 2.\tWrite a Python program to find the sum of all items in a dictionary?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "fd1126fd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The sum of dictionary values is: 100\n"
     ]
    }
   ],
   "source": [
    "sample_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 40}\n",
    "\n",
    "\n",
    "sum_values = sum(sample_dict.values())\n",
    "\n",
    "\n",
    "print(\"The sum of dictionary values is:\", sum_values)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb3bd055",
   "metadata": {},
   "source": [
    "## 3.\tWrite a Python program to Merging two Dictionaries?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9b57055c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Merged dictionary: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "dict1 = {'a': 1, 'b': 2}\n",
    "dict2 = {'c': 3, 'd': 4}\n",
    "\n",
    "\n",
    "dict1.update(dict2)\n",
    "\n",
    "\n",
    "print(\"Merged dictionary:\", dict1)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7622c6bd",
   "metadata": {},
   "source": [
    "## 4.\tWrite a Python program to convert key-values list to flat dictionary?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "94bbc429",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Flat dictionary: {'a': 1, 'b': 2, 'c': 3, 'd': 4}\n"
     ]
    }
   ],
   "source": [
    "key_value_pairs = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]\n",
    "\n",
    "\n",
    "flat_dict = {}\n",
    "\n",
    "\n",
    "for key, value in key_value_pairs:\n",
    "    flat_dict[key] = value\n",
    "\n",
    "\n",
    "print(\"Flat dictionary:\", flat_dict)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13a917c8",
   "metadata": {},
   "source": [
    "## 5.\tWrite a Python program to insertion at the beginning in OrderedDict?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "af489b48",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated ordered dictionary: OrderedDict([('a', 1), ('b', 2), ('c', 3), ('d', 4)])\n"
     ]
    }
   ],
   "source": [
    "\n",
    "from collections import OrderedDict\n",
    "\n",
    "ordered_dict = OrderedDict([('a', 1), ('b', 2), ('c', 3)])\n",
    "\n",
    "\n",
    "ordered_dict.update({'d': 4})\n",
    "\n",
    "\n",
    "print(\"Updated ordered dictionary:\", ordered_dict)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b06fa760",
   "metadata": {},
   "source": [
    "## 6.\tWrite a Python program to check order of character in string using OrderedDict()?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "feaefa8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Characters of pattern lo are in order in the string 'hello world'\n"
     ]
    }
   ],
   "source": [
    "from collections import OrderedDict\n",
    "\n",
    "\n",
    "def check_order(input_str, pattern):\n",
    "    \n",
    "    \n",
    "    pattern_dict = OrderedDict.fromkeys(pattern)\n",
    "    \n",
    "    \n",
    "    index = 0\n",
    "    \n",
    "    \n",
    "    for char in input_str:\n",
    "        \n",
    "        \n",
    "        if char in pattern_dict:\n",
    "            \n",
    "            \n",
    "            if pattern_dict[char] == None:\n",
    "                pattern_dict[char] = index\n",
    "                index += 1\n",
    "                \n",
    "            \n",
    "            else:\n",
    "                if pattern_dict[char] > index:\n",
    "                    return False\n",
    "                \n",
    "    return True\n",
    "\n",
    "\n",
    "input_str = \"hello world\"\n",
    "pattern = \"lo\"\n",
    "if check_order(input_str, pattern):\n",
    "    print(\"Characters of pattern {} are in order in the string '{}'\".format(pattern, input_str))\n",
    "else:\n",
    "    print(\"Characters of pattern {} are not in order in the string '{}'\".format(pattern, input_str))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b23a5287",
   "metadata": {},
   "source": [
    "## 7.\tWrite a Python program to sort Python Dictionaries by Key or Value?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "07479da3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sorted dictionary by key: {'apple': 50, 'banana': 20, 'mango': 10, 'orange': 30}\n",
      "Sorted dictionary by value: {'mango': 10, 'banana': 20, 'orange': 30, 'apple': 50}\n"
     ]
    }
   ],
   "source": [
    "my_dict = {'apple': 50, 'banana': 20, 'orange': 30, 'mango': 10}\n",
    "\n",
    "\n",
    "sorted_dict_by_key = dict(sorted(my_dict.items()))\n",
    "\n",
    "\n",
    "print(\"Sorted dictionary by key:\", sorted_dict_by_key)\n",
    "\n",
    "\n",
    "sorted_dict_by_value = dict(sorted(my_dict.items(), key=lambda item: item[1]))\n",
    "\n",
    "\n",
    "print(\"Sorted dictionary by value:\", sorted_dict_by_value)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86186fca",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
